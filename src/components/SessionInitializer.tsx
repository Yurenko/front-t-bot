import React, { useState, useEffect } from "react";
import { tradingApi, TradingSession } from "../services/api";

interface SessionInitializerProps {
  onSessionCreated: (session: TradingSession) => void;
}

const SessionInitializer: React.FC<SessionInitializerProps> = ({
  onSessionCreated,
}) => {
  const [symbol, setSymbol] = useState("BTCUSDT");
  const [initialBalance, setInitialBalance] = useState(1000);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [availableSymbols, setAvailableSymbols] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loadingSymbols, setLoadingSymbols] = useState(true);

  useEffect(() => {
    loadAvailableSymbols();
  }, []);

  const loadAvailableSymbols = async () => {
    try {
      setLoadingSymbols(true);
      const response = await tradingApi.getAvailableSymbols();
      setAvailableSymbols(response.data);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤:", error);
      // Fallback –¥–æ –±–∞–∑–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É
      setAvailableSymbols([
        "BTCUSDT",
        "ETHUSDT",
        "BNBUSDT",
        "ADAUSDT",
        "SOLUSDT",
        "DOTUSDT",
        "MATICUSDT",
        "LINKUSDT",
        "UNIUSDT",
        "AVAXUSDT",
      ]);
    } finally {
      setLoadingSymbols(false);
    }
  };

  const filteredSymbols = availableSymbols.filter((sym) =>
    sym.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const response = await tradingApi.initializeSession(
        symbol,
        initialBalance
      );
      onSessionCreated(response.data);

      // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É
      setSymbol("BTCUSDT");
      setInitialBalance(1000);
    } catch (err: any) {
      setError(err.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Å—ñ—ó");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-2xl font-bold mb-4 text-gray-800">
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–µ—Å—ñ—ó
      </h2>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –°–∏–º–≤–æ–ª –ø–∞—Ä–∏
          </label>

          {/* –ü–æ–ª–µ –ø–æ—à—É–∫—É */}
          <div className="mb-2 flex space-x-2">
            <input
              type="text"
              placeholder="–ü–æ—à—É–∫ —Å–∏–º–≤–æ–ª—É..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button
              type="button"
              onClick={loadAvailableSymbols}
              disabled={loadingSymbols}
              className="px-3 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 disabled:opacity-50"
            >
              {loadingSymbols ? "..." : "üîÑ"}
            </button>
          </div>

          {loadingSymbols ? (
            <div className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50">
              –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤...
            </div>
          ) : (
            <select
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              {filteredSymbols.length === 0 ? (
                <option value="">–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤</option>
              ) : (
                filteredSymbols.map((sym: string) => (
                  <option key={sym} value={sym}>
                    {sym}
                  </option>
                ))
              )}
            </select>
          )}

          {filteredSymbols.length > 0 && (
            <p className="text-sm text-gray-500 mt-1">
              –ó–Ω–∞–π–¥–µ–Ω–æ: {filteredSymbols.length} —Å–∏–º–≤–æ–ª—ñ–≤
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å (USD)
          </label>
          <input
            type="number"
            value={initialBalance}
            onChange={(e) => setInitialBalance(Number(e.target.value))}
            min="10"
            step="10"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
          <p className="text-sm text-gray-500 mt-1">
            –†–æ–∑–ø–æ–¥—ñ–ª: 75% –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ, 25% –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É
          </p>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è..." : "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é"}
        </button>
      </form>

      <div className="mt-6 p-4 bg-blue-50 rounded-md">
        <h3 className="font-semibold text-blue-800 mb-2">
          –°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ:
        </h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>‚Ä¢ –ü–ª–µ—á–µ: 3x</li>
          <li>‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4 —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è</li>
          <li>‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç: 3-9% ROI (1-3% —Ä—É—Ö —Ä–∏–Ω–∫—É)</li>
          <li>‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó</li>
          <li>‚Ä¢ –ë–µ–∑ —Å—Ç–æ–ø-–ª–æ—Å—ñ–≤</li>
          <li>‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö: 1m, 5m, 15m, 1h, 4h, 1d</li>
        </ul>
      </div>
    </div>
  );
};

export default SessionInitializer;
